// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");
var ReactNative = require("react-native");
var UtilsRN$BsReactNative = require("./private/utilsRN.js");

function start(t, callback, _) {
  t.start(Js_undefined.fromOption(callback));
  return /* () */0;
}

function extrapolateString(x) {
  switch (x) {
    case 0 : 
        return "extend";
    case 1 : 
        return "clamp";
    case 2 : 
        return "identity";
    
  }
}

function interpolate(value, inputRange, outputRange, easing, extrapolate, extrapolateLeft, extrapolateRight, _) {
  var tmp = {
    inputRange: $$Array.of_list(inputRange),
    outputRange: $$Array.of_list(outputRange[1])
  };
  if (easing !== undefined) {
    tmp.easing = Js_primitive.valFromOption(easing);
  }
  var tmp$1 = UtilsRN$BsReactNative.option_map(extrapolateString, extrapolate);
  if (tmp$1 !== undefined) {
    tmp.extrapolate = Js_primitive.valFromOption(tmp$1);
  }
  var tmp$2 = UtilsRN$BsReactNative.option_map(extrapolateString, extrapolateLeft);
  if (tmp$2 !== undefined) {
    tmp.extrapolateLeft = Js_primitive.valFromOption(tmp$2);
  }
  var tmp$3 = UtilsRN$BsReactNative.option_map(extrapolateString, extrapolateRight);
  if (tmp$3 !== undefined) {
    tmp.extrapolateRight = Js_primitive.valFromOption(tmp$3);
  }
  return value.interpolate(tmp);
}

function resetAnimation(value, callback, _) {
  value.resetAnimation(Js_undefined.fromOption(callback));
  return /* () */0;
}

function stopAnimation(value, callback, _) {
  value.stopAnimation(Js_undefined.fromOption(callback));
  return /* () */0;
}

function animate(value, velocity, deceleration, isInteraction, useNativeDriver, onComplete, iterations, _) {
  var tmp = {
    velocity: velocity
  };
  if (deceleration !== undefined) {
    tmp.deceleration = Js_primitive.valFromOption(deceleration);
  }
  if (isInteraction !== undefined) {
    tmp.isInteraction = Js_primitive.valFromOption(isInteraction);
  }
  if (useNativeDriver !== undefined) {
    tmp.useNativeDriver = Js_primitive.valFromOption(useNativeDriver);
  }
  if (onComplete !== undefined) {
    tmp.onComplete = Js_primitive.valFromOption(onComplete);
  }
  if (iterations !== undefined) {
    tmp.iterations = Js_primitive.valFromOption(iterations);
  }
  return ReactNative.Animated.decay(value, tmp);
}

var Decay = /* module */[/* animate */animate];

function animate$1(value, toValue, restDisplacementThreshold, overshootClamping, restSpeedThreshold, velocity, bounciness, speed, tension, friction, stiffness, mass, damping, isInteraction, useNativeDriver, onComplete, iterations, _) {
  return ReactNative.Animated.spring(value, {
              toValue: toValue[1],
              restDisplacementThreshold: Js_undefined.fromOption(restDisplacementThreshold),
              overshootClamping: Js_undefined.fromOption(overshootClamping),
              restSpeedThreshold: Js_undefined.fromOption(restSpeedThreshold),
              velocity: Js_undefined.fromOption(velocity),
              bounciness: Js_undefined.fromOption(bounciness),
              speed: Js_undefined.fromOption(speed),
              tension: Js_undefined.fromOption(tension),
              friction: Js_undefined.fromOption(friction),
              stiffness: Js_undefined.fromOption(stiffness),
              mass: Js_undefined.fromOption(mass),
              damping: Js_undefined.fromOption(damping),
              isInteraction: Js_undefined.fromOption(isInteraction),
              useNativeDriver: Js_undefined.fromOption(useNativeDriver),
              onComplete: Js_undefined.fromOption(onComplete),
              iterations: Js_undefined.fromOption(iterations)
            });
}

var Spring = /* module */[/* animate */animate$1];

function animate$2(value, toValue, easing, duration, delay, isInteraction, useNativeDriver, onComplete, iterations, _) {
  var tmp = {
    toValue: toValue[1]
  };
  if (easing !== undefined) {
    tmp.easing = Js_primitive.valFromOption(easing);
  }
  if (duration !== undefined) {
    tmp.duration = Js_primitive.valFromOption(duration);
  }
  if (delay !== undefined) {
    tmp.delay = Js_primitive.valFromOption(delay);
  }
  if (isInteraction !== undefined) {
    tmp.isInteraction = Js_primitive.valFromOption(isInteraction);
  }
  if (useNativeDriver !== undefined) {
    tmp.useNativeDriver = Js_primitive.valFromOption(useNativeDriver);
  }
  if (onComplete !== undefined) {
    tmp.onComplete = Js_primitive.valFromOption(onComplete);
  }
  if (iterations !== undefined) {
    tmp.iterations = Js_primitive.valFromOption(iterations);
  }
  return ReactNative.Animated.timing(value, tmp);
}

var Timing = /* module */[/* animate */animate$2];

function create(x, y) {
  return new (ReactNative.Animated.ValueXY)({
              x: x,
              y: y
            });
}

function setValue(t, x, y) {
  t.setValue({
        x: x,
        y: y
      });
  return /* () */0;
}

function setOffset(t, x, y) {
  t.setOffset({
        x: x,
        y: y
      });
  return /* () */0;
}

function animate$3(value, velocity, deceleration, isInteraction, useNativeDriver, onComplete, iterations, _) {
  var tmp = {
    velocity: velocity
  };
  if (deceleration !== undefined) {
    tmp.deceleration = Js_primitive.valFromOption(deceleration);
  }
  if (isInteraction !== undefined) {
    tmp.isInteraction = Js_primitive.valFromOption(isInteraction);
  }
  if (useNativeDriver !== undefined) {
    tmp.useNativeDriver = Js_primitive.valFromOption(useNativeDriver);
  }
  if (onComplete !== undefined) {
    tmp.onComplete = Js_primitive.valFromOption(onComplete);
  }
  if (iterations !== undefined) {
    tmp.iterations = Js_primitive.valFromOption(iterations);
  }
  return ReactNative.Animated.decay(value, tmp);
}

var Decay$1 = /* module */[/* animate */animate$3];

function animate$4(value, toValue, restDisplacementThreshold, overshootClamping, restSpeedThreshold, velocity, bounciness, speed, tension, friction, stiffness, mass, damping, isInteraction, useNativeDriver, onComplete, iterations, _) {
  return ReactNative.Animated.spring(value, {
              toValue: toValue[1],
              restDisplacementThreshold: Js_undefined.fromOption(restDisplacementThreshold),
              overshootClamping: Js_undefined.fromOption(overshootClamping),
              restSpeedThreshold: Js_undefined.fromOption(restSpeedThreshold),
              velocity: Js_undefined.fromOption(velocity),
              bounciness: Js_undefined.fromOption(bounciness),
              speed: Js_undefined.fromOption(speed),
              tension: Js_undefined.fromOption(tension),
              friction: Js_undefined.fromOption(friction),
              stiffness: Js_undefined.fromOption(stiffness),
              mass: Js_undefined.fromOption(mass),
              damping: Js_undefined.fromOption(damping),
              isInteraction: Js_undefined.fromOption(isInteraction),
              useNativeDriver: Js_undefined.fromOption(useNativeDriver),
              onComplete: Js_undefined.fromOption(onComplete),
              iterations: Js_undefined.fromOption(iterations)
            });
}

var Spring$1 = /* module */[/* animate */animate$4];

function animate$5(value, toValue, easing, duration, delay, isInteraction, useNativeDriver, onComplete, iterations, _) {
  var tmp = {
    toValue: toValue[1]
  };
  if (easing !== undefined) {
    tmp.easing = Js_primitive.valFromOption(easing);
  }
  if (duration !== undefined) {
    tmp.duration = Js_primitive.valFromOption(duration);
  }
  if (delay !== undefined) {
    tmp.delay = Js_primitive.valFromOption(delay);
  }
  if (isInteraction !== undefined) {
    tmp.isInteraction = Js_primitive.valFromOption(isInteraction);
  }
  if (useNativeDriver !== undefined) {
    tmp.useNativeDriver = Js_primitive.valFromOption(useNativeDriver);
  }
  if (onComplete !== undefined) {
    tmp.onComplete = Js_primitive.valFromOption(onComplete);
  }
  if (iterations !== undefined) {
    tmp.iterations = Js_primitive.valFromOption(iterations);
  }
  return ReactNative.Animated.timing(value, tmp);
}

var Timing$1 = /* module */[/* animate */animate$5];

function loop($staropt$star, animation, _) {
  var iterations = $staropt$star !== undefined ? $staropt$star : -1;
  return ReactNative.Animated.loop(animation, {
              iterations: iterations
            });
}

function stop(prim) {
  prim.stop();
  return /* () */0;
}

function reset(prim) {
  prim.reset();
  return /* () */0;
}

function Animation_000(prim) {
  prim.stop();
  return /* () */0;
}

function Animation_002(prim) {
  prim.reset();
  return /* () */0;
}

var Animation = [
  Animation_000,
  start,
  Animation_002
];

var Interpolation = [interpolate];

function Value_000(prim) {
  return new (ReactNative.Animated.Value)(prim);
}

function Value_001(prim, prim$1) {
  prim.setValue(prim$1);
  return /* () */0;
}

function Value_002(prim, prim$1) {
  prim.setOffset(prim$1);
  return /* () */0;
}

function Value_003(prim) {
  prim.flattenOffset();
  return /* () */0;
}

function Value_004(prim) {
  prim.extractOffset();
  return /* () */0;
}

function Value_005(prim, prim$1) {
  return prim.addListener(prim$1);
}

function Value_006(prim, prim$1) {
  prim.removeListener(prim$1);
  return /* () */0;
}

function Value_007(prim) {
  prim.removeAllListeners();
  return /* () */0;
}

function Value_013(prim, prim$1) {
  return ReactNative.Animated.add(prim, prim$1);
}

function Value_014(prim, prim$1) {
  return ReactNative.Animated.divide(prim, prim$1);
}

function Value_015(prim, prim$1) {
  return ReactNative.Animated.subtract(prim, prim$1);
}

function Value_016(prim, prim$1) {
  return ReactNative.Animated.multiply(prim, prim$1);
}

function Value_017(prim, prim$1) {
  return ReactNative.Animated.modulo(prim, prim$1);
}

function Value_018(prim, prim$1, prim$2) {
  return ReactNative.Animated.diffClamp(prim, prim$1, prim$2);
}

var Value = [
  Value_000,
  Value_001,
  Value_002,
  Value_003,
  Value_004,
  Value_005,
  Value_006,
  Value_007,
  resetAnimation,
  stopAnimation,
  Timing,
  Spring,
  Decay,
  Value_013,
  Value_014,
  Value_015,
  Value_016,
  Value_017,
  Value_018,
  interpolate
];

function ValueXY_003(prim) {
  prim.flattenOffset();
  return /* () */0;
}

function ValueXY_004(prim) {
  prim.extractOffset();
  return /* () */0;
}

function ValueXY_005(prim, prim$1) {
  prim.resetAnimation(prim$1);
  return /* () */0;
}

function ValueXY_006(prim, prim$1) {
  prim.stopAnimation(prim$1);
  return /* () */0;
}

function ValueXY_007(prim, prim$1) {
  return prim.addListener(prim$1);
}

function ValueXY_008(prim, prim$1) {
  prim.removeListener(prim$1);
  return /* () */0;
}

function ValueXY_009(prim) {
  prim.removeAllListeners();
  return /* () */0;
}

function ValueXY_010(prim) {
  return prim.getLayout();
}

function ValueXY_011(prim) {
  return prim.getTranslateTransform();
}

function ValueXY_012(prim) {
  return prim.x;
}

function ValueXY_013(prim) {
  return prim.y;
}

var ValueXY = [
  create,
  setValue,
  setOffset,
  ValueXY_003,
  ValueXY_004,
  ValueXY_005,
  ValueXY_006,
  ValueXY_007,
  ValueXY_008,
  ValueXY_009,
  ValueXY_010,
  ValueXY_011,
  ValueXY_012,
  ValueXY_013,
  Timing$1,
  Spring$1,
  Decay$1
];

function $$event(prim, prim$1) {
  return ReactNative.Animated.event(prim, prim$1);
}

function delay(prim) {
  return ReactNative.Animated.delay(prim);
}

function sequence(prim) {
  return ReactNative.Animated.sequence(prim);
}

function parallel(prim, prim$1) {
  return ReactNative.Animated.parallel(prim, prim$1);
}

function stagger(prim, prim$1) {
  return ReactNative.Animated.stagger(prim, prim$1);
}

function createAnimatedComponent(prim) {
  return ReactNative.Animated.createAnimatedComponent(prim);
}

var timing = animate$2;

var spring = animate$1;

var decay = animate;

exports.Animation = Animation;
exports.Interpolation = Interpolation;
exports.Value = Value;
exports.ValueXY = ValueXY;
exports.$$event = $$event;
exports.delay = delay;
exports.sequence = sequence;
exports.parallel = parallel;
exports.stagger = stagger;
exports.loop = loop;
exports.createAnimatedComponent = createAnimatedComponent;
exports.timing = timing;
exports.spring = spring;
exports.decay = decay;
exports.stop = stop;
exports.start = start;
exports.reset = reset;
/* react-native Not a pure module */
