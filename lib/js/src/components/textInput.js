// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var ReactNative = require("react-native");
var Props$BsReactNative = require("../private/props.js");
var UtilsRN$BsReactNative = require("../private/utilsRN.js");

function make(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, autoCapitalize, autoCorrect, autoFocus, blurOnSubmit, caretHidden, defaultValue, editable, keyboardType, maxLength, multiline, onBlur, onChange, onChangeText, onContentSizeChange, onEndEditing, onFocus, onScroll, onSelectionChange, onSubmitEditing, placeholder, placeholderTextColor, returnKeyType, secureTextEntry, selectTextOnFocus, selection, selectionColor, value, disableFullscreenUI, inlineImageLeft, inlineImagePadding, numberOfLines, returnKeyLabel, textBreakStrategy, underlineColorAndroid, clearButtonMode, clearTextOnFocus, dataDetectorTypes, enablesReturnKeyAutomatically, keyboardAppearance, onKeyPress, selectionState, spellCheck, inputAccessoryViewID) {
  var partial_arg = Props$BsReactNative.extendView(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, {
        autoCapitalize: UtilsRN$BsReactNative.option_map((function (x) {
                if (x >= -707897174) {
                  if (x >= 57776752) {
                    return "sentences";
                  } else {
                    return "characters";
                  }
                } else if (x >= -832270487) {
                  return "words";
                } else {
                  return "none";
                }
              }), autoCapitalize),
        autoCorrect: autoCorrect,
        autoFocus: autoFocus,
        blurOnSubmit: blurOnSubmit,
        caretHidden: caretHidden,
        defaultValue: defaultValue,
        editable: editable,
        keyboardType: UtilsRN$BsReactNative.option_map((function (x) {
                if (x >= 511059466) {
                  if (x >= 734061261) {
                    if (x >= 965330242) {
                      if (x >= 1008346616) {
                        return "email-address";
                      } else {
                        return "decimal-pad";
                      }
                    } else if (x >= 776586867) {
                      return "twitter";
                    } else {
                      return "numeric";
                    }
                  } else if (x >= 568483612) {
                    return "web-search";
                  } else {
                    return "number-pad";
                  }
                } else if (x >= -324562960) {
                  if (x >= 217673051) {
                    if (x >= 465819841) {
                      return "default";
                    } else {
                      return "ascii-capable";
                    }
                  } else if (x >= 5843823) {
                    return "url";
                  } else {
                    return "name-phone-pad";
                  }
                } else if (x >= -444948859) {
                  return "phone-pad";
                } else {
                  return "numbers-and-punctuation";
                }
              }), keyboardType),
        maxLength: maxLength,
        multiline: multiline,
        onBlur: onBlur,
        onChange: onChange,
        onChangeText: onChangeText,
        onContentSizeChange: onContentSizeChange,
        onEndEditing: onEndEditing,
        onFocus: onFocus,
        onScroll: onScroll,
        onSelectionChange: onSelectionChange,
        onSubmitEditing: onSubmitEditing,
        placeholder: placeholder,
        placeholderTextColor: placeholderTextColor,
        returnKeyType: UtilsRN$BsReactNative.option_map((function (x) {
                if (x >= -487088280) {
                  if (x >= 23080) {
                    if (x >= 598785079) {
                      if (x >= 939679119) {
                        return "emergencyCall";
                      } else {
                        return "previous";
                      }
                    } else if (x >= 465819841) {
                      return "default";
                    } else {
                      return "go";
                    }
                  } else if (x !== -337039680) {
                    if (x >= -312083063) {
                      return "route";
                    } else {
                      return "search";
                    }
                  } else {
                    return "yahoo";
                  }
                } else if (x >= -922086728) {
                  if (x >= -574324323) {
                    if (x >= -504773703) {
                      return "google";
                    } else {
                      return "done";
                    }
                  } else if (x >= -867136184) {
                    return "send";
                  } else {
                    return "none";
                  }
                } else if (x >= -922581773) {
                  return "next";
                } else {
                  return "join";
                }
              }), returnKeyType),
        secureTextEntry: secureTextEntry,
        selectTextOnFocus: selectTextOnFocus,
        selection: selection,
        selectionColor: selectionColor,
        value: value,
        disableFullscreenUI: disableFullscreenUI,
        inlineImageLeft: inlineImageLeft,
        inlineImagePadding: inlineImagePadding,
        numberOfLines: numberOfLines,
        returnKeyLabel: returnKeyLabel,
        textBreakStrategy: UtilsRN$BsReactNative.option_map((function (x) {
                if (x !== -128197688) {
                  if (x >= 947848242) {
                    return "simple";
                  } else {
                    return "highQuality";
                  }
                } else {
                  return "balanced";
                }
              }), textBreakStrategy),
        underlineColorAndroid: underlineColorAndroid,
        clearButtonMode: UtilsRN$BsReactNative.option_map((function (x) {
                if (x >= -894774937) {
                  if (x >= 422592140) {
                    return "never";
                  } else {
                    return "while-editing";
                  }
                } else if (x >= -958984497) {
                  return "always";
                } else {
                  return "unless-editing";
                }
              }), clearButtonMode),
        clearTextOnFocus: clearTextOnFocus,
        dataDetectorTypes: UtilsRN$BsReactNative.option_map((function (param) {
                return $$Array.map((function (x) {
                              if (x !== -940571433) {
                                if (x >= -119363460) {
                                  if (x >= 4847905) {
                                    return "all";
                                  } else {
                                    return "calendarEvent";
                                  }
                                } else if (x >= -922086728) {
                                  return "none";
                                } else {
                                  return "link";
                                }
                              } else {
                                return "phoneNumber";
                              }
                            }), param);
              }), dataDetectorTypes),
        enablesReturnKeyAutomatically: enablesReturnKeyAutomatically,
        keyboardAppearance: UtilsRN$BsReactNative.option_map((function (x) {
                if (x !== -184774442) {
                  if (x >= 465819841) {
                    return "never";
                  } else {
                    return "dark";
                  }
                } else {
                  return "light";
                }
              }), keyboardAppearance),
        onKeyPress: onKeyPress,
        selectionState: selectionState,
        spellCheck: spellCheck,
        inputAccessoryViewID: inputAccessoryViewID
      });
  var partial_arg$1 = ReactNative.TextInput;
  return (function (param) {
      return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
    });
}

function isFocused(prim) {
  return prim.isFocused();
}

function clear(prim) {
  prim.clear();
  return /* () */0;
}

function focus(prim) {
  prim.focus();
  return /* () */0;
}

function blur(prim) {
  prim.blur();
  return /* () */0;
}

exports.make = make;
exports.isFocused = isFocused;
exports.clear = clear;
exports.focus = focus;
exports.blur = blur;
/* ReasonReact Not a pure module */
