// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReactNative = require("react-native");
var Props$BsReactNativeWeb = require("../private/props.js");
var UtilsRN$BsReactNativeWeb = require("../private/utilsRN.js");

function CreateComponent(Impl) {
  var scrollTo = function (ref, x, y, animated) {
    ref.scrollTo({
          x: x,
          y: y,
          animated: animated
        });
    return /* () */0;
  };
  var scrollToEnd = function (ref, animated) {
    ref.scrollToEnd({
          animated: animated
        });
    return /* () */0;
  };
  var make = function (accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, contentContainerStyle, horizontal, keyboardDismissMode, keyboardShouldPersistTaps, onContentSizeChange, onScroll, pagingEnabled, refreshControl, scrollEnabled, showsHorizontalScrollIndicator, showsVerticalScrollIndicator, stickyHeaderIndices, overScrollMode, scrollPerfTag, alwaysBounceHorizontal, alwaysBounceVertical, automaticallyAdjustContentInsets, bounces, canCancelContentTouches, centerContent, contentInset, contentOffset, decelerationRate, directionalLockEnabled, indicatorStyle, maximumZoomScale, minimumZoomScale, onScrollAnimationEnd, scrollEventThrottle, scrollIndicatorInsets, scrollsToTop, snapToAlignment, zoomScale) {
    var partial_arg = Props$BsReactNativeWeb.extendView(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, {
          contentContainerStyle: contentContainerStyle,
          horizontal: horizontal,
          keyboardDismissMode: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                  if (x !== -453364557) {
                    if (x >= 1012481506) {
                      return "interactive";
                    } else {
                      return "none";
                    }
                  } else {
                    return "on-drag";
                  }
                }), keyboardDismissMode),
          keyboardShouldPersistTaps: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                  if (x !== -958984497) {
                    if (x >= 422592140) {
                      return "never";
                    } else {
                      return "handled";
                    }
                  } else {
                    return "always";
                  }
                }), keyboardShouldPersistTaps),
          onContentSizeChange: onContentSizeChange,
          onScroll: onScroll,
          pagingEnabled: pagingEnabled,
          refreshControl: refreshControl,
          scrollEnabled: scrollEnabled,
          showsHorizontalScrollIndicator: showsHorizontalScrollIndicator,
          showsVerticalScrollIndicator: showsVerticalScrollIndicator,
          stickyHeaderIndices: UtilsRN$BsReactNativeWeb.option_map($$Array.of_list, stickyHeaderIndices),
          overScrollMode: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                  if (x !== -958984497) {
                    if (x >= 422592140) {
                      return "never";
                    } else {
                      return "auto";
                    }
                  } else {
                    return "always";
                  }
                }), overScrollMode),
          scrollPerfTag: scrollPerfTag,
          alwaysBounceHorizontal: alwaysBounceHorizontal,
          alwaysBounceVertical: alwaysBounceVertical,
          automaticallyAdjustContentInsets: automaticallyAdjustContentInsets,
          bounces: bounces,
          canCancelContentTouches: canCancelContentTouches,
          centerContent: centerContent,
          contentInset: contentInset,
          contentOffset: UtilsRN$BsReactNativeWeb.option_map((function (param) {
                  return {
                          x: param[/* x */0],
                          y: param[/* y */1]
                        };
                }), contentOffset),
          decelerationRate: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                  if (x >= 812216871) {
                    return "normal";
                  } else {
                    return "fast";
                  }
                }), decelerationRate),
          directionalLockEnabled: directionalLockEnabled,
          indicatorStyle: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                  if (x !== 465819841) {
                    if (x >= 888264127) {
                      return "black";
                    } else {
                      return "white";
                    }
                  } else {
                    return "default";
                  }
                }), indicatorStyle),
          maximumZoomScale: maximumZoomScale,
          minimumZoomScale: minimumZoomScale,
          onScrollAnimationEnd: onScrollAnimationEnd,
          scrollEventThrottle: scrollEventThrottle,
          scrollIndicatorInsets: scrollIndicatorInsets,
          scrollsToTop: scrollsToTop,
          snapToAlignment: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                  if (x !== 67859554) {
                    if (x >= 98248149) {
                      return "center";
                    } else {
                      return "end";
                    }
                  } else {
                    return "start";
                  }
                }), snapToAlignment),
          zoomScale: zoomScale
        });
    var partial_arg$1 = Impl[/* view */0];
    return (function (param) {
        return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
      });
  };
  return /* module */[
          /* scrollTo */scrollTo,
          /* scrollToEnd */scrollToEnd,
          /* make */make
        ];
}

var Impl = /* module */[/* ScrollView */ReactNative.ScrollView];

function scrollTo(ref, x, y, animated) {
  ref.scrollTo({
        x: x,
        y: y,
        animated: animated
      });
  return /* () */0;
}

function scrollToEnd(ref, animated) {
  ref.scrollToEnd({
        animated: animated
      });
  return /* () */0;
}

function make(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, contentContainerStyle, horizontal, keyboardDismissMode, keyboardShouldPersistTaps, onContentSizeChange, onScroll, pagingEnabled, refreshControl, scrollEnabled, showsHorizontalScrollIndicator, showsVerticalScrollIndicator, stickyHeaderIndices, overScrollMode, scrollPerfTag, alwaysBounceHorizontal, alwaysBounceVertical, automaticallyAdjustContentInsets, bounces, canCancelContentTouches, centerContent, contentInset, contentOffset, decelerationRate, directionalLockEnabled, indicatorStyle, maximumZoomScale, minimumZoomScale, onScrollAnimationEnd, scrollEventThrottle, scrollIndicatorInsets, scrollsToTop, snapToAlignment, zoomScale) {
  var partial_arg = Props$BsReactNativeWeb.extendView(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, {
        contentContainerStyle: contentContainerStyle,
        horizontal: horizontal,
        keyboardDismissMode: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                if (x !== -453364557) {
                  if (x >= 1012481506) {
                    return "interactive";
                  } else {
                    return "none";
                  }
                } else {
                  return "on-drag";
                }
              }), keyboardDismissMode),
        keyboardShouldPersistTaps: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                if (x !== -958984497) {
                  if (x >= 422592140) {
                    return "never";
                  } else {
                    return "handled";
                  }
                } else {
                  return "always";
                }
              }), keyboardShouldPersistTaps),
        onContentSizeChange: onContentSizeChange,
        onScroll: onScroll,
        pagingEnabled: pagingEnabled,
        refreshControl: refreshControl,
        scrollEnabled: scrollEnabled,
        showsHorizontalScrollIndicator: showsHorizontalScrollIndicator,
        showsVerticalScrollIndicator: showsVerticalScrollIndicator,
        stickyHeaderIndices: UtilsRN$BsReactNativeWeb.option_map($$Array.of_list, stickyHeaderIndices),
        overScrollMode: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                if (x !== -958984497) {
                  if (x >= 422592140) {
                    return "never";
                  } else {
                    return "auto";
                  }
                } else {
                  return "always";
                }
              }), overScrollMode),
        scrollPerfTag: scrollPerfTag,
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        automaticallyAdjustContentInsets: automaticallyAdjustContentInsets,
        bounces: bounces,
        canCancelContentTouches: canCancelContentTouches,
        centerContent: centerContent,
        contentInset: contentInset,
        contentOffset: UtilsRN$BsReactNativeWeb.option_map((function (param) {
                return {
                        x: param[/* x */0],
                        y: param[/* y */1]
                      };
              }), contentOffset),
        decelerationRate: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                if (x >= 812216871) {
                  return "normal";
                } else {
                  return "fast";
                }
              }), decelerationRate),
        directionalLockEnabled: directionalLockEnabled,
        indicatorStyle: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                if (x !== 465819841) {
                  if (x >= 888264127) {
                    return "black";
                  } else {
                    return "white";
                  }
                } else {
                  return "default";
                }
              }), indicatorStyle),
        maximumZoomScale: maximumZoomScale,
        minimumZoomScale: minimumZoomScale,
        onScrollAnimationEnd: onScrollAnimationEnd,
        scrollEventThrottle: scrollEventThrottle,
        scrollIndicatorInsets: scrollIndicatorInsets,
        scrollsToTop: scrollsToTop,
        snapToAlignment: UtilsRN$BsReactNativeWeb.option_map((function (x) {
                if (x !== 67859554) {
                  if (x >= 98248149) {
                    return "center";
                  } else {
                    return "end";
                  }
                } else {
                  return "start";
                }
              }), snapToAlignment),
        zoomScale: zoomScale
      });
  var partial_arg$1 = Impl[/* view */0];
  return (function (param) {
      return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
    });
}

exports.CreateComponent = CreateComponent;
exports.scrollTo = scrollTo;
exports.scrollToEnd = scrollToEnd;
exports.make = make;
/* Impl Not a pure module */
